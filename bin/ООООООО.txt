<?php

namespace BrainGames\\Engine;

use function cli\\line;
use function cli\\prompt;

/**
 * Запускает игровую сессию.
 *
 * @param string $userName Имя пользователя.
 * @param string $gameDescription Описание игры.
 * @param callable $getQuestionAndAnswer Функция, возвращающая вопрос и правильный ответ.
 *                                         Должна возвращать ассоциативный массив с ключами 'question' и 'answer'.
 * @return void
 */
function playGame(string $userName, string $gameDescription, callable $getQuestionAndAnswer): void
{
    line($gameDescription);

    for ($i = 0; $i < 3; $i++) {
        $data = $getQuestionAndAnswer();
        $question = $data['question'];
        $correctAnswer = $data['answer'];

        line("Question: %s", $question);
        $userAnswer = prompt("Your answer");

        if ($userAnswer === $correctAnswer) {
            line("Correct!");
        } else {
            line("'{$userAnswer}' is wrong answer ;(. Correct answer was '{$correctAnswer}'.");
            line("Let's try again, {$userName}!");
            return;
        }
    }

    line("Congratulations, {$userName}!");
}

Объяснение изменений и почему они сделаны именно так:



Namespace: Добавлен namespace BrainGames\\Engine. Это важно для организации кода и предотвращения конфликтов имен.


Docblock: Добавлен Docblock для описания функции playGame. Это облегчает понимание кода и его документирование.


Параметризация:  Функция playGame теперь принимает три параметра:




$userName: Имя пользователя (строка).

$gameDescription: Описание игры (строка), которое выводится в начале каждой игры.

$getQuestionAndAnswer:  Самый важный параметр. Это  callable (функция или closure). Эта функция  должна:

Не принимать аргументов.

Генерировать вопрос и правильный ответ для одного раунда игры.

Возвращать ассоциативный массив с ключами 'question' и 'answer' (оба значения должны быть строками).



Унификация ввода/вывода: Использованы функции cli\\line и cli\\prompt из библиотеки php-cli-tools (предполагается, что она установлена).  Это обеспечивает консистентность ввода/вывода во всех играх.


Унификация логики раунда: Основной цикл for теперь выполняет общую логику для всех игр: получение вопроса и ответа от $getQuestionAndAnswer, вывод вопроса, получение ответа пользователя, сравнение с правильным ответом и вывод результата.


Типизация: Добавлена типизация параметров и возвращаемого значения.



Как использовать новую функцию playGame:


В каждой игре (например, games/calc.php, games/even.php и т. д.):



Определите description


const GAME_DESCRIPTION = 'What is the result of the expression?';


Создайте функцию, которая генерирует вопрос и правильный ответ для одного раунда:


function getQuestionAndAnswer(): array
{
    // Генерируем вопрос и правильный ответ (зависит от конкретной игры)
    $num1 = rand(1, 10);
    $num2 = rand(1, 10);
    $operation = ['+', '-', '*'][array_rand(['+', '-', '*'])];
    $question = "{$num1} {$operation} {$num2}";

    switch ($operation) {
        case '+':
            $answer = (string) ($num1 + $num2);
            break;
        case '-':
            $answer = (string) ($num1 - $num2);
            break;
        case '*':
            $answer = (string) ($num1 * $num2);
            break;
        default:
            throw new \\Exception("Unknown operation: {$operation}");
    }
    return ['question' => $question, 'answer' => $answer];
}


В главной функции игры (например, games/calc.php):


<?php

namespace BrainGames\\Games\\Calc;

use function BrainGames\\Engine\\playGame;

const GAME_DESCRIPTION = 'What is the result of the expression?';


function getQuestionAndAnswer(): array
{
    // Генерируем вопрос и правильный ответ (зависит от конкретной игры)
    $num1 = rand(1, 10);
    $num2 = rand(1, 10);
    $operation = ['+', '-', '*'][array_rand(['+', '-', '*'])];
    $question = "{$num1} {$operation} {$num2}";

    switch ($operation) {
        case '+':
            $answer = (string) ($num1 + $num2);
            break;
        case '-':
            $answer = (string) ($num1 - $num2);
            break;
        case '*':
            $answer = (string) ($num1 * $num2);
            break;
        default:
            throw new \\Exception("Unknown operation: {$operation}");
    }
    return ['question' => $question, 'answer' => (string) $answer];
}

function run(): void
{
    line(GAME_DESCRIPTION);
    $name = prompt('May I have your name?');
    line("Hello, %s!", $name);
    playGame($name, GAME_DESCRIPTION, __NAMESPACE__ . '\\\\getQuestionAndAnswer');
}

Преимущества такого подхода:



DRY (Don't Repeat Yourself): Общая логика игры вынесена в одну функцию, что уменьшает дублирование кода.

Разделение ответственности:  playGame отвечает за логику игры (количество раундов, проверка ответов), а каждая конкретная игра отвечает только за генерацию вопросов и правильных ответов.

Легче поддерживать и расширять: Если нужно изменить общую логику игры (например, увеличить количество раундов), это делается только в одном месте.  Добавить новую игру легко: просто создайте новую функцию генерации вопросов/ответов и передайте её в playGame.

Тестируемость:  Функцию getQuestionAndAnswer легко тестировать, так как она не зависит от ввода/вывода.


Как адаптировать существующие игры:



Создайте файл Src/Engine.php и поместите туда код, который я предоставил.

Определите namespace для каждой игры.  Например, для игры "calc" это может быть BrainGames\\Games\\Calc.

Перенесите функцию, которая генерирует вопрос и ответ, в файл игры (например, games/calc.php). Переименуйте ее в getQuestionAndAnswer и убедитесь, что она возвращает ассоциативный массив с ключами 'question' и 'answer' (оба значения должны быть строками).

В файле каждой игры (например, games/calc.php) используйте функцию playGame:


   <?php

   namespace BrainGames\\Games\\Calc;

   use function BrainGames\\Engine\\playGame;
   use function cli\\line;
   use function cli\\prompt;


   function getQuestionAndAnswer(): array
   {
       // (Ваша логика генерации вопроса и ответа)
   }

   function run(): void
   {
       line(GAME_DESCRIPTION);
       $name = prompt('May I have your name?');
       line("Hello, %s!", $name);
       playGame($name, GAME_DESCRIPTION, __NAMESPACE__ . '\\\\getQuestionAndAnswer');
   }

Замените BrainGames\\Games\\Calc на фактический namespace вашей игры.


Важно:



Убедитесь, что php-cli-tools установлена: composer require psy/psysh

Если в ваших играх уже есть логика приветствия пользователя (запрос имени), уберите эту логику из функции getQuestionAndAnswer. Она должна только генерировать вопрос и ответ.

В функции getQuestionAndAnswer преобразуйте все числовые ответы в строки с помощью (string).


Этот рефакторинг значительно улучшит структуру вашего кода и упростит его поддержку.